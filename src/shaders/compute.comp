#version 450
#extension GL_ARB_separate_shader_objects : enable

#define HIGHLIGHT_SUN 1
#define WORKGROUP_SIZE 32

#define PI 3.14159265
#define ONE_OVER_FOURPI 0.07957747154594767
#define E 2.718281828459
#define DEG2RAD 0.01745f
#define ONE_DAY 100.0f


// TODO: check go through cloud?
// Atmosphere
#define ATMOSPHERE_RADIUS 1500000.0
#define ATMOSPHERE_RADIUS_INNER ATMOSPHERE_RADIUS
#define ATMOSPHERE_RADIUS_OUTER ATMOSPHERE_RADIUS * 1.02
#define ATMOSPHERE_THICKNESS (ATMOSPHERE_RADIUS_OUTER - ATMOSPHERE_RADIUS_INNER) * 0.5

// Sun, Light source
#define SUN_LOCATION vec3(0.0, ATMOSPHERE_RADIUS_OUTER, ATMOSPHERE_RADIUS_OUTER ) * 0.9f

// Wind
#define WIND_DIRECTION vec3(1.0f, 0.0f, 0.0f)
#define CLOUD_SPEED 100.0f

layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE) in;

layout (set = 0, binding = 0, rgba32f) uniform image2D targetImage;
layout (set = 1, binding = 0, rgba32f) uniform readonly image2D sourceImage;

layout(set = 2, binding = 0) uniform CameraObject {
    mat4 view;
    mat4 proj;
    vec4 cameraPosition;
} camera;

layout(set = 2, binding = 2) uniform CameraParamObject {
    float halfTanFOV;
    float aspectRatio;
    int pixelOffset;
} cameraParam;

layout(set = 3, binding = 0) uniform sampler3D profileCloudShape;
layout(set = 3, binding = 1) uniform sampler3D detailCloudShape;
layout(set = 3, binding = 2) uniform sampler2D weatherMap;
layout(set = 3, binding = 3) uniform sampler2D curlNoise;

layout(set = 4, binding = 0) uniform TimeObject {
    float deltaTime;
    float totalTime;
    float sunPositionX;
    float sunPositionY;
    float sunPositionZ;
} time;

// structs
struct VoxelCloudModelingData {
    float mDimensionalProfile;
    float mDetailType;
    float mDensityScale;
};

struct VoxelCloudDensitySamples {
    float mProfile; // profile
    float mFull;    // detail
};

struct CloudRenderingRaymarchInfo {
    float mDistance;       // ray marching distance
    float mCloudDistance;  // distance to cloud
    float mStepSize;       // step size
};

struct Ray {
	vec3 mOrigin;
	vec3 mDirection;
};

struct Intersection {
    vec3 mNormal;
    vec3 mPoint;
    float mTime;
};

//--------------------------------------------------------
//					ATMOSPHERE FUNCTIONS
//--------------------------------------------------------
// Get the point projected to the inner atmosphere shell
vec3 GetProjectedShellPoint(vec3 pos, vec3 center) {
    return 0.5f * ATMOSPHERE_RADIUS * normalize(pos - center) + center;
}

float GetRelativeHeight(vec3 pos, vec3 projectedPos, float thickness) {
    return clamp(length(pos - projectedPos) / thickness, 0.0f, 1.0f);
}

vec3 SkewSamplePointWithWind(vec3 samplePoint, float height_fraction) {
    //skew in wind direction
    vec3 point = samplePoint;
    point += CLOUD_SPEED * (WIND_DIRECTION + height_fraction * vec3(0.0f, 0.1f, 0.0f)) 
        * (time.totalTime + height_fraction * 20.f);
    return point;
}

//--------------------------------------------------------
//					TOOL BOX FUNCTIONS
//--------------------------------------------------------
float ValueRemap(float inValue, float inOldMin, float inOldMax, float inMin, float inMax) {
    return inMin + (((inValue - inOldMin) / (inOldMax - inOldMin)) * (inMax - inMin));
    //float old_min_max_range = (inOldMax - inOldMin);
    //float clamped_normalized = clamp((inValue - inOldMin) / old_min_max_range, 0.0f, 1.0f);
    //return inMin + (clamped_normalized * (inMax - inMin));
}

float ValueRemapClamped(float inValue, float inOldMin, float inOldMax, float inMin, float inMax) {
    return clamp(ValueRemap(inValue, inOldMin, inOldMax, inMin, inMax), inMin, inMax);
}

float ValueErosion(float inValue, float inOldMin) {
    // derrived from Set-Range, this function uses the oldMin to erode or inflate the input value. - inValues inflate while + inValues erode
    float old_min_max_range = (1.0 - inOldMin);
    float clamped_normalized = clamp((inValue - inOldMin) / old_min_max_range, 0.0f, 1.0f);
    return (clamped_normalized);
}

float GetFractionFromValue(float inValue, float inMin, float inMax) {
    return clamp((inValue - inMin) / (inMax - inMin), 0.0f, 1.0f);
}

//--------------------------------------------------------
//					Density Sample Functions
//--------------------------------------------------------

float GetUprezzedVoxelCloudDensity(vec3 samplePoint, float profileDensity, float densityScale) {
    // Step1 - Apply wind offset
    //samplePoint -= vec3(cCloudWindOffset.x, cCloudWindOffset.y, 0.0) * voxel_cloud_animation_speed;

    // Step2 - Sample noise

    // Step3 - Define Detail Erosion

    //       Wispy

    //       Billowy

    float uprezzed_density;

    // Step4 - Apply Detail Erosion

    return uprezzed_density;
}


VoxelCloudDensitySamples GetVoxelCloudDensitySamples(vec3 samplePoint, Ray ray) {
    VoxelCloudDensitySamples densitySamples;
    densitySamples.mProfile = 0.0f;
    densitySamples.mFull = 0.0f;

    

    return densitySamples;
}

float GetCloudLayerDensity(float relativeHeight, float cloudType) {
    relativeHeight = clamp(relativeHeight, 0, 1);
    
    float cumulus = max(0.0, ValueRemap(relativeHeight, 0.0, 0.2, 0.0, 1.0) * ValueRemap(relativeHeight, 0.7, 0.9, 1.0, 0.0));
    float stratocumulus = max(0.0, ValueRemap(relativeHeight, 0.0, 0.2, 0.0, 1.0) * ValueRemap(relativeHeight, 0.2, 0.7, 1.0, 0.0)); 
    float stratus = max(0.0, ValueRemap(relativeHeight, 0.0, 0.1, 0.0, 1.0) * ValueRemap(relativeHeight, 0.2, 0.3, 1.0, 0.0)); 

    float d1 = mix(stratus, stratocumulus, clamp(cloudType * 2.0, 0.0, 1.0));
    float d2 = mix(stratocumulus, cumulus, clamp((cloudType - 0.5) * 2.0, 0.0, 1.0));
    return mix(d1, d2, cloudType);
}


float GetBaseDensity(vec3 skewSamplePoint, float height) {
    // Weather map and type
    vec3 cloudInfo = texture(weatherMap, skewSamplePoint.xz * 0.00001).rgb; // TODO: check freq
    float cloudType = cloudInfo.b; // 0 = stratus, 1 = cumulus, .5 = stratocumulus
    float layerDensity = GetCloudLayerDensity(height, cloudType);

    // Sample low res shape
    vec4 profileNoise = texture(profileCloudShape, 0.00002 * skewSamplePoint);
    float density = layerDensity * ValueRemapClamped(profileNoise.r, 0.3, 1.0, 0.0, 1.0);
    if (density < 0.0001) return 0.0f;

    // Calculate cloud coverage
    float coverage = pow(cloudInfo.r, ValueRemap(height, 0.7, 0.8, 1.0, 0.8)); // lerp(1.0, 0.5, anvil_bias)

    float erosion = 0.625 * profileNoise.g + 0.25 * profileNoise.b + 0.125 * profileNoise.w;
    erosion = ValueRemapClamped(erosion, coverage, 1.0, 0.0, 1.0);
    density = ValueRemapClamped(density, erosion, 1.0, 0.0, 1.0);

    return density;
}

float GetDetailDensity(vec3 skewSamplePoint, float density, float height, float curlStrength) {
    // Curl noise on the bottom
    vec3 curl = texture(curlNoise, skewSamplePoint.xz * 0.0001).rgb;
    curl = 2.0 * curl - 1.0;
    skewSamplePoint += 2.0f * curlStrength * curl;

    vec4 densityNoise = texture(detailCloudShape, 0.0004 * skewSamplePoint);
	float erosion = 0.625 * densityNoise.r + 0.25 * densityNoise.g + 0.125 * densityNoise.b;
    erosion = mix(erosion, 1.0 - erosion, clamp(height * 10.0, 0.0, 1.0));

    return ValueRemapClamped(density, erosion, 1.0, 0.0, 1.0);
}

//--------------------------------------------------------
//					Lighting Functions
//--------------------------------------------------------
vec3[] samples = vec3[6](
	 vec3(0, 0.6, 0),
     vec3(0, 0.5, 0.05),
     vec3(0.1, 0.75, 0),
     vec3(0.2, 2.5, 0.3),
     vec3(0, 6, 0),
     vec3(-0.1, 1, -0.2)
);

void CalculateLightingSamples(Ray ray, vec3 lightDir) {

    vec3 maxCompUnitVector;
    if(abs(lightDir[0]) > abs(lightDir[1]) && abs(lightDir[0]) > abs(lightDir[2])) {
        maxCompUnitVector = vec3(abs(lightDir[0]), 0.0, 0.0);
    }
    else if(abs(lightDir[1]) > abs(lightDir[0]) && abs(lightDir[1]) > abs(lightDir[2])) {
        maxCompUnitVector = vec3(0.0, abs(lightDir[1]), 0.0);
    }
    else {
        maxCompUnitVector = vec3(0.0, 0.0, abs(lightDir[2]));
    }

    vec3 zComponent = cross(lightDir, maxCompUnitVector);
    vec3 xComponent = cross(zComponent, lightDir);
    mat3 sunRotMatrix = mat3(xComponent, lightDir, zComponent);

    for (int i = 0; i < 6; i++) {
		samples[i] = sunRotMatrix * samples[i];
	}
}

float HG(float cosTheta, float eccentricity) {
    float inv = 1.0 / pow(1.0 - 2.0 * eccentricity * cosTheta + eccentricity * eccentricity, 1.5);
    return ONE_OVER_FOURPI * ((1.0 - eccentricity * eccentricity) * inv);
}

void SampleLight(vec3 samplePos, float stepSize, vec3 earthCenter, float cosTheta, float henyeyGreenstein, float baseDensity, float height,
    float accumDensity, inout float transmittance) {
    vec3 color = vec3(0.f);
    float lightDensity = 0.0f;

    for (int i = 0; i < 6; i++) {
        vec3 lightPos = samplePos + (stepSize * samples[i] * float(i));
        vec3 lightProj = GetProjectedShellPoint(lightPos, earthCenter);

        float lightHeight = GetRelativeHeight(lightPos, lightProj, ATMOSPHERE_THICKNESS);

        vec3 skewSamplePos = SkewSamplePointWithWind(lightPos, lightHeight);

        float loDensity = GetBaseDensity(skewSamplePos, lightHeight);
        if (loDensity > 0.0f) {
			float detailDensity = GetDetailDensity(skewSamplePos, loDensity, lightHeight, stepSize);
			lightDensity += detailDensity;
		}
    }

    float beersLaw = exp(-lightDensity);
    float beersModulated = max(beersLaw, 0.7 * exp(-0.25 * lightDensity));
    beersLaw = mix(beersLaw, beersModulated, -cosTheta * 0.5 + 0.5);

    float inScatter = 0.09 + pow(baseDensity, ValueRemap(height, 0.3, 0.85, 0.5, 2.0));

    transmittance = mix(transmittance, inScatter * henyeyGreenstein * beersLaw , (1.0f - accumDensity));
}


//--------------------------------------------------------
//					Raymarching Functions
//--------------------------------------------------------
void RaymarchVoxelClouds(Ray ray, vec3 startPos, float start_t, float end_t, 
        vec3 earthCenter, vec3 lightDir,   
        out float accumDensity, out float transmittance) {
    float stepSize = 0.05 * ATMOSPHERE_THICKNESS;

    // Lighting
    CalculateLightingSamples(ray, lightDir);
    float cosTheta = dot(ray.mDirection, normalize(lightDir));
    float henyeyGreenstein = HG(cosTheta, 0.2f); // TODO: MANIPULATE

    accumDensity = 0.0f;

    bool noHits = true;
    int misses = 0;
    int steps = 0;

    for (float t = start_t; t < end_t; t += stepSize) {
        vec3 pos = ray.mOrigin + ray.mDirection * t;
        vec3 proj = GetProjectedShellPoint(pos, earthCenter);
        float relativeHeight = GetRelativeHeight(pos, proj, ATMOSPHERE_THICKNESS);

        vec3 skewSamplePoint = SkewSamplePointWithWind(pos, relativeHeight);

        // Sample density
        float profileDensity = GetBaseDensity(skewSamplePoint, relativeHeight);

        if (profileDensity > 0.0f) {
            misses = 0;
            if (noHits) {
                //start high-resolution march
                t -= stepSize;
                stepSize *= 0.3;
                noHits = false;
                continue; // go back half a step
            }

			// Get detail density for cloud erosion
            float detailDensity = GetDetailDensity(skewSamplePoint, profileDensity, relativeHeight, stepSize);
            if (detailDensity < 0.0001f) continue;

            SampleLight(pos, stepSize, earthCenter, cosTheta, henyeyGreenstein, profileDensity, relativeHeight, accumDensity, transmittance);
            accumDensity += detailDensity;
		} else if (!noHits) {
            misses++;
            if (misses >= 10) {
                noHits = true; // revert to low resolution marching
                stepSize /= 0.3;
            }
        }

        ++steps;
        if (accumDensity > 0.999f) {
            accumDensity = 1.0f;
            break;
        }
    }
}

Ray GenerateRay(vec2 uv) {
    Ray ray;

    vec3 camLook =   normalize(vec3(camera.view[0][2], camera.view[1][2], camera.view[2][2]));
    vec3 camRight =  normalize(vec3(camera.view[0][0], camera.view[1][0], camera.view[2][0]));
    vec3 camUp =     normalize(vec3(camera.view[0][1], camera.view[1][1], camera.view[2][1]));

    vec2 screenPoint = uv * 2.0 - 1.0; // [-1, 1] -> [0, 1]
    // TODO: Jitter pointx

    vec3 cameraPos = camera.cameraPosition.xyz;
    vec3 refPoint = cameraPos - camLook;
    vec3 p = refPoint 
             + cameraParam.aspectRatio * screenPoint.x * cameraParam.halfTanFOV * camRight 
             - screenPoint.y * cameraParam.halfTanFOV * camUp;

    ray.mOrigin = cameraPos;
    ray.mDirection = normalize(p - cameraPos);

    return ray;
}

Intersection RaySphereIntersection(Ray ray, vec3 sphereCenter, float sphereRadius) {
	Intersection isect;
    isect.mTime = -1.0f;
    isect.mPoint = vec3(0.0);
    isect.mNormal = vec3(0.0, 1.0, 0.0);

    vec3 oc = ray.mOrigin - sphereCenter;
    oc /= sphereRadius;

    float a = dot(ray.mDirection, ray.mDirection);
    float b = 2.0f * dot(oc, ray.mDirection);
    float c = dot(oc, oc) - 0.25f;
    float discriminant = b * b - 4.0f * a * c;

    if (discriminant < 0.0f) {
        // no intersection
        return isect;
    } 

    float t = (-b - sqrt(discriminant)) / (2.0f * a);
    if (t < 0.0f) {
        t = (-b + sqrt(discriminant)) / (2.0f * a);
    }

    if (t >= 0.0) {
        vec3 p = vec3(oc + t * ray.mDirection);
        isect.mNormal = normalize(p);

        p *= sphereRadius;
        p += sphereCenter;

        isect.mPoint = p;
        isect.mTime = length(p - oc);
    }

    return isect;
}

//--------------------------------------------------------
//					        Sky
//--------------------------------------------------------

float depolarizationFactor = 0.137;
float luminance = 1.0;
float mieCoefficient = 0.0074;
float mieDirectionalG = 0.468;
vec3 mieKCoefficient = vec3(0.686, 0.678, 0.666);
float mieV = 4.007;
float mieZenithLength = 7100;
float numMolecules = 2.542e25;
vec3 primaries = vec3(6.8e-7, 5.5e-7, 4.5e-7);
float rayleigh = 5.75;
float rayleighZenithLength = 3795;
float refractiveIndex = 1.000128;
float sunAngularDiameterDegrees = 0.032;
float sunIntensityFactor = 1024;
float sunIntensityFalloffSteepness = 1.4;
float tonemapWeighting = 19.50;
float turbidity = 12.575;
vec3 UP = vec3(0.0, 1.0, 0.0);

float noise(vec3 coord)
{
    float starThreshold = 0.97;
    float n = fract(415.92653 * (0.7 * cos(37.3 * coord.x) + 1.2 * cos(56.1 * coord.y) + 0.2 * cos(45.8 * coord.z)));
    if (n >= starThreshold)
    {
        n = pow((n - starThreshold) / (1.0 - starThreshold), 10.0);
    }
    else n = 0.0;
    return n;
}

vec3 totalRayleigh(vec3 lambda)
{
	return (8.0 * pow(PI, 3.0) * pow(pow(refractiveIndex, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * depolarizationFactor)) / (3.0 * numMolecules * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * depolarizationFactor));
}

vec3 totalMie(vec3 lambda, vec3 K, float T)
{
	float c = 0.2 * T * 10e-18;
	return 0.434 * c * PI * pow((2.0 * PI) / lambda, vec3(mieV - 2.0)) * K;
}

float rayleighPhase(float cosTheta)
{
	return (3.0 / (16.0 * PI)) * (1.0 + pow(cosTheta, 2.0));
}

float henyeyGreensteinPhase(float cosTheta, float g)
{
	return (1.0 / (4.0 * PI)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0 * g * cosTheta + pow(g, 2.0), 1.5));
}

float sunIntensity(float zenithAngleCos)
{
	float cutoffAngle = PI / 1.95; // Earth shadow hack
	return sunIntensityFactor * max(0.0, 1.0 - exp(-((cutoffAngle - acos(zenithAngleCos)) / sunIntensityFalloffSteepness)));
}

vec3 Uncharted2Tonemap(vec3 W)
{
    float A = 0.15; 
    float B = 0.50; 
    float C = 0.10; 
    float D = 0.20; 
    float EE = 0.02; 
    float F = 0.30; 
	return ((W * (A * W + C * B) + D * EE) / (W * (A * W + B) + D * F)) - EE / F;
}

vec3 GetStarColor(vec3 rayDir, vec3 sunDir)
{ 
    //star
    float intensity = 0.0;
    if (sunDir.y < 0.0)
    {
        intensity = 1.0;
        if (sunDir.y > -0.75)
        {
            intensity = mix(0.0, 1.0, -sunDir.y);
        }
        vec3 coordFloor = floor(rayDir * 700 + time.totalTime * 0.1);
        float starVal = noise(coordFloor) * intensity * 0.8;
        return vec3(starVal);
    }
    return vec3(0);
}

vec4 GetSkyColor2(vec3 rayDir, vec3 sunPosition, float cloudDensity)
{
    // Rayleigh coefficient
	float sunfade = 1.0 - clamp(1.0 - exp((sunPosition.y / 450000.0)), 0.0, 1.0);
	float rayleighCoefficient = rayleigh - (1.0 * (1.0 - sunfade));
	vec3 betaR = totalRayleigh(primaries) * rayleighCoefficient;
	
	// Mie coefficient
	vec3 betaM = totalMie(primaries, mieKCoefficient, turbidity) * mieCoefficient;
	
	// Optical length, cutoff angle at 90 to avoid singularity
	float zenithAngle = acos(max(0.0, dot(UP, rayDir)));
	float denom = cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / PI), -1.253);
	float sR = rayleighZenithLength / denom;
	float sM = mieZenithLength / denom;
	
	// Combined extinction factor
	vec3 Fex = exp(-(betaR * sR + betaM * sM));
	
	// In-scattering
	vec3 sunDirection = normalize(sunPosition);
	float cosTheta = dot(rayDir, sunDirection);
	vec3 betaRTheta = betaR * rayleighPhase(cosTheta * 0.5 + 0.5);
	vec3 betaMTheta = betaM * henyeyGreensteinPhase(cosTheta, mieDirectionalG);
	float sunE = sunIntensity(dot(sunDirection, UP));
	vec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex), vec3(1.5));
	Lin *= mix(vec3(1.0), pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex, vec3(0.5)), clamp(pow(1.0 - dot(UP, sunDirection), 5.0), 0.0, 1.0));
	
	// Composition + solar disc
	float sunAngularDiameterCos = cos(sunAngularDiameterDegrees);
	float sundisk = smoothstep(sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta);
	vec3 L0 = vec3(0.1) * Fex;
    float sunHDR = mix(19000.0, 1, cloudDensity);
	L0 += sunE * sunHDR * Fex * sundisk * (1.0 - cloudDensity);
	vec3 texColor = Lin + L0;
	texColor *= 0.04;
	texColor += vec3(0.0, 0.001, 0.0025) * 0.3;
	
	// Tonemapping
	vec3 whiteScale = 1.0 / Uncharted2Tonemap(vec3(tonemapWeighting));
	vec3 curr = Uncharted2Tonemap((log2(2.0 / pow(luminance, 4.0))) * texColor);
	vec3 color = curr * whiteScale;
	vec3 retColor = pow(color, vec3(1.0 / (1.2 + (1.2 * sunfade))));

    // Star
    retColor += GetStarColor(rayDir, sunDirection) * (1.0 - cloudDensity);

    vec4 result;
    result.xyz = retColor;
    result.a = mix(1, 40, clamp(sunDirection.y, 0, 1));
    return result;
}

void main() 
{
    // Get UV
    ivec2 dim = imageSize(sourceImage);

    // TODO: 1/16 of the pixels after reproject compute shader
    //ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy) * 4 + ivec2(cameraParam.pixelOffset % 4, cameraParam.pixelOffset / 4);

    vec2 uv = vec2(pixel) / dim; 
    Ray ray = GenerateRay(uv);

    // Update Sun
    vec3 sunPos = vec3(time.sunPositionX, time.sunPositionY, time.sunPositionZ);
    vec3 sunDir = normalize(sunPos);
  
    // below horizon, return
    if (ray.mDirection.y < 0.0f) {
        vec4 sky = GetSkyColor2(ray.mDirection, sunPos, 0.0);
        vec3 bgColor = sky.rgb;
		imageStore(targetImage, pixel, vec4(bgColor, 1.0f));
		return;
	}

    // Find start and end point of raymarching
    vec3 earthCenter = ray.mOrigin;
    earthCenter.y = -ATMOSPHERE_RADIUS * 0.5f;

    Intersection atmosphereInnerIsect = RaySphereIntersection(ray, earthCenter, ATMOSPHERE_RADIUS_INNER);
	Intersection atmosphereOuterIsect = RaySphereIntersection(ray, earthCenter, ATMOSPHERE_RADIUS_OUTER);

    // Ray march
    float transmittance = 0.0f;
    float accumDensity = 0.0f;
    RaymarchVoxelClouds(ray, atmosphereInnerIsect.mPoint, atmosphereInnerIsect.mTime, atmosphereOuterIsect.mTime, earthCenter, sunDir, accumDensity, transmittance);

    // Background color
    vec4 sky = GetSkyColor2(ray.mDirection, sunPos, accumDensity);
    vec3 bgColor = sky.rgb;

    accumDensity *= smoothstep(0, 1, min(1, ValueRemap(ray.mDirection.y, 0, 0.1, 0, 1)));
    vec3 cloudColor = (sky.a * vec3(0.97, 0.86, 0.8) * vec3(max(0.0, transmittance)) + 0.1f * bgColor * exp(-transmittance));

    vec4 finalColor = vec4(mix(bgColor, cloudColor, accumDensity), 1.0f);
    finalColor.a *= max(1.0 - accumDensity, 0.0);

#ifdef HIGHLIGHT_SUN
    //Highlight Sun for Debug
    float angleFromSun = acos(clamp(dot(ray.mDirection, sunDir), -0.999999, 0.999999)) * 180.0 / PI;
    if(angleFromSun < 1.5)
    {
        finalColor = vec4(1, 0, 0, 1);
    }
#endif

    imageStore(targetImage, pixel, finalColor);
}