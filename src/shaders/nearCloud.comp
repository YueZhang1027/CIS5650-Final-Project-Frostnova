#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32

#define PI 3.14159265
#define ONE_OVER_FOURPI 0.07957747154594767

#define NEAR_THRESHOLD 500.f

// Cloud animation
// #define CLOUD_ANIMATE_SPEED 10.f
#define CLOUD_WIND_OFFSET vec2(0.1, 0.1)

#define EPSILON 0.1

// Mip Map
#define USE_FINE_DETAIL_MIPMAP false
#define USE_FINE_DETAIL_MIPMAP_DISTANCE_SCALE 10.0

// Raymarching
// #define MAX_RAYMARCHING_DISTANCE 500.0
// #define VIEW_RAY_TRANSIMITTANCE_LIMIT 0.01
#define VOXEL_BOUND_MIN vec3(-1024.0, -1024.0, -128.0)
#define VOXEL_BOUND_MAX vec3(1024.0, 1024.0, 128.0)

// Density
#define DENSITY_SCALE 0.01

layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE) in;

layout (set = 0, binding = 0, rgba32f) uniform image2D targetImageColor;
layout (set = 6, binding = 0, rgba32f) uniform image2D targetImageDensity;

layout(set = 1, binding = 0) uniform CameraObject {
    mat4 view;
    mat4 proj;
    vec4 cameraPosition;
} camera;

layout(set = 1, binding = 2) uniform CameraParamObject {
    float halfTanFOV;
    float aspectRatio;
    int pixelOffset;
} cameraParam;

// Modeling NVDF's
// 512 x 512 x 64
// R: Dimentional Profile 
// G: Detail Type
// B: Density Scale
// A: SDF
layout(set = 2, binding = 0) uniform sampler3D modelingNVDFTexture;

// Field Data NVDF
// 512 x 512 x 64
// layout(set = 2, binding = 1) uniform sampler3D fieldNVDFTexture;

// Detail Noise
// 128 * 128 * 128
layout(set = 2, binding = 1) uniform sampler3D cloudDetailNoiseTexture;

layout(set = 3, binding = 0) uniform TimeObject {
    float deltaTime;
    float totalTime;
    float sunPositionX;
    float sunPositionY;
    float sunPositionZ;
} time;

layout (set = 4, binding = 0) uniform sampler3D lightGrid;

layout (set = 5, binding = 0) uniform UIParamOvject {
    float farclip;
    float transmittance_limit;
    float tiling_freq;
    float animate_speed;
    vec3 animate_dir;
    float enable_godray;
    float godray_exposure;
    float sky_turbidity;
    int envrionment_choice;
} uiParam;

// structs
struct VoxelCloudModelingData {
    float mDimensionalProfile;
    float mDetailType;
    float mDensityScale;
    float mSdf;
};

struct VoxelCloudDensitySamples {
    float mProfile; // profile
    float mFull;    // detail
};

struct CloudRenderingRaymarchInfo {
    float mDistance;       // ray marching distance
    float mCloudDistance;  // distance to cloud
    float mStepSize;       // step size
    vec2 mLimit;           // limit
};

struct CloudRenderingPixelData {
    float mDensity;
    float mTransmittance;
    float mAlpha;
    vec3 mCloudColor;
    vec3 mSkyColor;
    vec3 mSkyColorNoSun;
    float mSunDisk;
    float mNight;
};

struct Ray {
	vec3 mOrigin;
	vec3 mDirection;
};

struct Intersection {
    vec3 mNormal;
    vec3 mPoint;
    float mTime;
};


//--------------------------------------------------------
//					ATMOSPHERE FUNCTIONS
//--------------------------------------------------------


//--------------------------------------------------------
//					TOOL BOX FUNCTIONS
//--------------------------------------------------------
float ValueRemap(float inValue, float inOldMin, float inOldMax, float inMin, float inMax) {
    float old_min_max_range = (inOldMax - inOldMin);
    float clamped_normalized = clamp((inValue - inOldMin) / old_min_max_range, 0, 1);
    return inMin + (clamped_normalized * (inMax - inMin));
}


float ValueErosion(float inValue, float inOldMin) {
    // derrived from Set-Range, this function uses the oldMin to erode or inflate the input value. - inValues inflate while + inValues erode
    float old_min_max_range = (1.0 - inOldMin);
    float clamped_normalized = clamp((inValue - inOldMin) / old_min_max_range, 0, 1);
    return (clamped_normalized);
}

float GetFractionFromValue(float inValue, float inMin, float inMax) {
    return clamp((inValue - inMin) / (inMax - inMin), 0, 1);
}

float GetVoxelCloudMipLevel(CloudRenderingRaymarchInfo inRaymarchInfo, float inMipLevel) {
    // Apply Distance based Mip Offset
    float mipmap_level = USE_FINE_DETAIL_MIPMAP ? inMipLevel : log2(1.0 + abs(inRaymarchInfo.mDistance * USE_FINE_DETAIL_MIPMAP_DISTANCE_SCALE)) + inMipLevel;
    return mipmap_level;
}

vec3 GetSampleCoord(vec3 inSamplePosition) {
    vec3 sample_coord = (inSamplePosition - VOXEL_BOUND_MIN) / (VOXEL_BOUND_MAX - VOXEL_BOUND_MIN);
    // if (sample_coord.x < 0.0 || sample_coord.x > 1.0 || sample_coord.y < 0.0 || sample_coord.y > 1.0 || sample_coord.z < 0.0 || sample_coord.z > 1.0) {
	// 	return sample_coord;
	// }

    sample_coord = vec3(1.0f) - sample_coord;
    return sample_coord;
}

//--------------------------------------------------------
//					Density Sample Functions
//--------------------------------------------------------
VoxelCloudModelingData GetVoxelCloudModelingData(vec3 inSamplePosition, float inMipLevel) {
    VoxelCloudModelingData modeling_data;
    vec4 Modeling_NVDF = texture(modelingNVDFTexture, inSamplePosition).rgba;
    modeling_data.mDimensionalProfile = Modeling_NVDF.r;
    modeling_data.mDetailType = Modeling_NVDF.g;
    modeling_data.mDensityScale = Modeling_NVDF.b;
    modeling_data.mSdf = ValueRemap(Modeling_NVDF.a, 0.0f, 1.0f, -256.0f, 4096.0f);

    return modeling_data;
}

// Detail density sample
float GetUprezzedVoxelCloudDensity(CloudRenderingRaymarchInfo inRaymarchInfo, vec3 inSamplePos, float inDimensionalProfile, float inType, float inDensityScale, float inMipLevel, bool inHFDetails)
{
    // Step1-Apply wind offset
    inSamplePos -= vec3(CLOUD_WIND_OFFSET.x, CLOUD_WIND_OFFSET.y, 0.0) * uiParam.animate_speed * time.totalTime;

    // Step2-Sample noise
    float mipmap_level = GetVoxelCloudMipLevel(inRaymarchInfo, inMipLevel);
    // R��Low Freq "Curl-Alligator", G:High Freq "Curl-Alligator", B:Low Freq "Alligator", A: High Freq "Alligator"

    vec4 noise = texture(cloudDetailNoiseTexture, inSamplePos * uiParam.tiling_freq); // TODO: check freq

    // Step3-Define Detail Erosion
    // wispy
    float wispy_noise = mix(noise.r, noise.g, inDimensionalProfile);

    // billowy
    float billowy_type_gradient = pow(inDimensionalProfile, 0.25);
    float billowy_noise = mix(noise.b * 0.3, noise.a * 0.3, billowy_type_gradient);

    // High Noise composite - blend to wispy as the density scale decreases.
    float noise_composite = mix(wispy_noise, billowy_noise, inType);

    // high frequency detail?
    if (inHFDetails)
    {
        float hhf_wisps = 1.0 - pow(abs(abs(noise.g * 2.0 - 1.0) * 2.0 - 1.0), 4.0);
        float hhf_billows = pow(abs(abs(noise.a * 2.0 - 1.0) * 2.0 - 1.0), 2.0);
        float hhf_noise = clamp(mix(hhf_wisps, hhf_billows, inType), 0, 1);
        float hhf_noise_distance_range_blender = ValueRemap(inRaymarchInfo.mDistance, 50.0, 150.0, 0.9, 1.0); // unit: meter
        noise_composite = mix(hhf_noise, noise_composite, hhf_noise_distance_range_blender);
    }

    // composite noise
    float uprezzed_density = ValueErosion(inDimensionalProfile, noise_composite);
    float powered_density_scale = pow(clamp(inDensityScale, 0, 1), 4.0);
    uprezzed_density *= powered_density_scale;

    // make low frequency region more sharp
    uprezzed_density = pow(uprezzed_density, mix(0.3, 0.6, max(EPSILON, powered_density_scale)));

    if (inHFDetails)
    {
        float distance_range_blender = GetFractionFromValue(inRaymarchInfo.mDistance, 50.0, 150.0);
        uprezzed_density = pow(uprezzed_density, mix(0.5, 1.0, distance_range_blender)) * mix(0.666, 1.0, distance_range_blender);
    }

    return uprezzed_density;
}



VoxelCloudDensitySamples GetVoxelCloudDensitySamples(CloudRenderingRaymarchInfo inRaymarchInfo, VoxelCloudModelingData modeling_data, vec3 samplePosition, float inMipLevel, bool inHFDetails) {
    VoxelCloudDensitySamples density_samples;
    density_samples.mProfile = 0.0;
	density_samples.mFull = 0.0;

    float dimensional_profile = modeling_data.mDimensionalProfile;
    float type = modeling_data.mDetailType;
    float density_scale = modeling_data.mDensityScale;

    if (dimensional_profile > 0.0) {
        density_samples.mProfile = dimensional_profile * density_scale;

        density_samples.mFull = GetUprezzedVoxelCloudDensity(inRaymarchInfo, samplePosition, dimensional_profile, type, density_scale, inMipLevel, inHFDetails) // TODO: check profile
                                    * ValueRemap(inRaymarchInfo.mDistance, 10.0, 120.0, 0.25, 1.0);
    }

    return density_samples;
}

//--------------------------------------------------------
//					Lighting Functions
//--------------------------------------------------------
float HG(float cos_angle, float eccentricity) {
    float g2 = eccentricity * eccentricity;
    float val = ((1.0 - g2) / pow(1.0 + g2 - 2.0 * eccentricity * cos_angle , 1.5)) * ONE_OVER_FOURPI;
    return val ;
}

float Remap(float original_value, float original_min, float original_max, float new_min, float new_max)
{
    return new_min + (((original_value - original_min) / (original_max - original_min)) * (new_max - new_min));
}

float GetDensityToSun(CloudRenderingRaymarchInfo inRaymarchInfo, VoxelCloudModelingData modeling_data,
                      vec3 samplePos, vec3 lightDir)
{
    float totalDensity = 0.0f;
    vec3 pos = samplePos;
    vec3 sampleCoord;

    for (int i = 0; i < 2; i++) {
        pos += lightDir * inRaymarchInfo.mStepSize;
        sampleCoord = GetSampleCoord(pos);
        totalDensity += GetVoxelCloudDensitySamples(inRaymarchInfo, modeling_data, sampleCoord, 1.0f, false).mFull;
    }

    pos += lightDir * inRaymarchInfo.mStepSize;
    sampleCoord = GetSampleCoord(pos);   
    totalDensity += texture(lightGrid, sampleCoord).r;

    return totalDensity;
}

float GetDensityLowLOD(vec3 sampleCoord) {
    return texture(lightGrid, sampleCoord).g;
}

void IntegrateLightEnergy(CloudRenderingRaymarchInfo inRaymarchInfo, VoxelCloudModelingData modeling_data,
                    VoxelCloudDensitySamples sampleData, 
                    vec3 samplePosition, vec3 sampleCoord, vec3 lightDir, float cos_angle, 
                    inout CloudRenderingPixelData ioPixelData) 
{
    float profile = sampleData.mProfile;

    // Cloud distance
    float cloud_distance = inRaymarchInfo.mCloudDistance;

    // Calculate Density to Sun
    float density_to_sun = GetDensityToSun(inRaymarchInfo, modeling_data, samplePosition, lightDir);

    // Calculate Low LOD Density
    float density_Lod = GetDensityLowLOD(sampleCoord);

    // Ambient (Nubis3 slides)
    profile *= exp(-density_to_sun * Remap(cos_angle, 0.0, 0.9, 0.25, Remap(cloud_distance, -128.0, 0.0, 0.05, 0.25)));
    float ambient_scattering = pow(1.0 - profile, 0.5) * exp(-density_to_sun);

    
    // Light Energy (Nubis2 slides)
    float silver_spread = 1.32;
    float silver_intensity = 1.27;
    float brightness = 0.5;
    float eccentricity = 1.0;

    // Attenuation
    float primary_attenuation = exp(-density_to_sun);
    float secondary_attenuation = exp(-density_to_sun * 0.25) * 0.7;
    float attenuation_probability = max(Remap(cos_angle, 0.7, 1.0, secondary_attenuation, secondary_attenuation * 0.25) , primary_attenuation);

    // Phase probability
    float phase_probability = max(HG(cos_angle, eccentricity), silver_intensity * HG(cos_angle, 0.99 - silver_spread));

    float light_energy = attenuation_probability * phase_probability * brightness;
    light_energy = exp(-light_energy * 5);

    vec3 white = vec3(1, 1, 1);
    vec3 _colB = mix(ioPixelData.mSkyColorNoSun, vec3(0.23f, 0.36f, 0.47f), clamp(-lightDir.z + 0.5, 0, 1));
    vec3 _colA = mix(ioPixelData.mSkyColorNoSun, vec3(1.0, 0.87, 0.65), clamp(-lightDir.z + 0.2, 0, 1));

    float _colorOffset1 = 0.16;
    float _colorOffset2 = 12.6;

    vec3 cloudColor = mix(_colA, white, clamp(light_energy * _colorOffset1, 0, 1));
    cloudColor = mix(_colB, cloudColor, clamp(pow(light_energy * _colorOffset2, 3), 0, 1)); 
    if(ioPixelData.mDensity <= 1.0)
    {
        cloudColor = (1 - ambient_scattering) * cloudColor + ambient_scattering * _colB;
    }
  
    ioPixelData.mTransmittance += sampleData.mFull * light_energy * ioPixelData.mAlpha; 
    ioPixelData.mCloudColor += sampleData.mFull * cloudColor * ioPixelData.mAlpha;
    ioPixelData.mAlpha *= exp(-sampleData.mFull * 1.0);  
}


//--------------------------------------------------------
//					Raymarching Functions
//--------------------------------------------------------
void SetRaymarchLimit(Ray ray, inout CloudRenderingRaymarchInfo raymarch_info) {
    float tmin = 4096.0f, tmax = -4096.0f;

    if (ray.mOrigin.x >= VOXEL_BOUND_MIN.x && ray.mOrigin.x <= VOXEL_BOUND_MAX.x && 
        ray.mOrigin.y >= VOXEL_BOUND_MIN.y && ray.mOrigin.y <= VOXEL_BOUND_MAX.y && 
        ray.mOrigin.z >= VOXEL_BOUND_MIN.z && ray.mOrigin.z <= VOXEL_BOUND_MAX.z) {
		tmin = 0.0f;
	}

    // x axis
    if (ray.mDirection.x != 0.0f) {
		float t1 = abs((VOXEL_BOUND_MAX.x - ray.mOrigin.x) / ray.mDirection.x);
        vec3 p = ray.mOrigin + ray.mDirection * t1;
        if (p.y >= VOXEL_BOUND_MIN.y && p.y <= VOXEL_BOUND_MAX.y && p.z >= VOXEL_BOUND_MIN.z && p.z <= VOXEL_BOUND_MAX.z) {
            tmin = min(tmin, t1);
            tmax = max(tmax, t1);
		}

        float t2 = abs((VOXEL_BOUND_MIN.x - ray.mOrigin.x) / ray.mDirection.x);
		p = ray.mOrigin + ray.mDirection * t2;
		if (p.y >= VOXEL_BOUND_MIN.y && p.y <= VOXEL_BOUND_MAX.y && p.z >= VOXEL_BOUND_MIN.z && p.z <= VOXEL_BOUND_MAX.z) {
			tmin = min(tmin, t2);
			tmax = max(tmax, t2);
		}
	} 

	// y axis
	if (ray.mDirection.y != 0.0f) {
		float t1 = abs((VOXEL_BOUND_MAX.y - ray.mOrigin.y) / ray.mDirection.y);
		vec3 p = ray.mOrigin + ray.mDirection * t1;
		if (p.x >= VOXEL_BOUND_MIN.x && p.x <= VOXEL_BOUND_MAX.x && p.z >= VOXEL_BOUND_MIN.z && p.z <= VOXEL_BOUND_MAX.z) {
			tmin = min(tmin, t1);
			tmax = max(tmax, t1);
		}

        float t2 = abs((VOXEL_BOUND_MIN.y - ray.mOrigin.y) / ray.mDirection.y);
        p = ray.mOrigin + ray.mDirection * t2;
		if (p.x >= VOXEL_BOUND_MIN.x && p.x <= VOXEL_BOUND_MAX.x && p.z >= VOXEL_BOUND_MIN.z && p.z <= VOXEL_BOUND_MAX.z) {
			tmin = min(tmin, t2);
			tmax = max(tmax, t2);
		}
	} 

	// z axis
	if (ray.mDirection.z != 0.0f) {
		float t1 = abs((VOXEL_BOUND_MAX.z - ray.mOrigin.z) / ray.mDirection.z);
		vec3 p = ray.mOrigin + ray.mDirection * t1;
		if (p.x >= VOXEL_BOUND_MIN.x && p.x <= VOXEL_BOUND_MAX.x && p.y >= VOXEL_BOUND_MIN.y && p.y <= VOXEL_BOUND_MAX.y) {
			tmin = min(tmin, t1);
			tmax = max(tmax, t1);
		}

        float t2 = abs((VOXEL_BOUND_MIN.z - ray.mOrigin.z) / ray.mDirection.z);
		p = ray.mOrigin + ray.mDirection * t2;
        if (p.x >= VOXEL_BOUND_MIN.x && p.x <= VOXEL_BOUND_MAX.x && p.y >= VOXEL_BOUND_MIN.y && p.y <= VOXEL_BOUND_MAX.y) {
			tmin = min(tmin, t2);
			tmax = max(tmax, t2);
		}
	}

    raymarch_info.mLimit = vec2(tmin, tmax);
    raymarch_info.mDistance = raymarch_info.mLimit.x;
}

void RaymarchVoxelClouds(Ray ray, vec3 lightDir, inout CloudRenderingPixelData ioPixelData) {
    CloudRenderingRaymarchInfo raymarch_info;
    raymarch_info.mDistance = 0.0;

    // Intersect with bounding box
    SetRaymarchLimit(ray, raymarch_info);

    float cos_angle = dot(ray.mDirection, lightDir);

    while (ioPixelData.mTransmittance > uiParam.transmittance_limit &&
         raymarch_info.mDistance < min(uiParam.farclip, raymarch_info.mLimit.y)) {
         vec3 sample_position = ray.mOrigin + ray.mDirection * raymarch_info.mDistance;
         vec3 sample_coord = GetSampleCoord(sample_position);

         if (sample_coord.x >= 0.0 && sample_coord.x <= 1.0 && sample_coord.y >= 0.0 && sample_coord.y <= 1.0 && sample_coord.z >= 0.0 && sample_coord.z <= 1.0) { 
             VoxelCloudModelingData modeling_data = GetVoxelCloudModelingData(sample_coord, 0.0f);
             
             // Adaptive Step Size
             float adaptive_step_size = max(1.0, max(sqrt(raymarch_info.mDistance), EPSILON) * 0.08);

             raymarch_info.mCloudDistance = modeling_data.mSdf; // raymarch_info.mCloudDistance = GetVoxelCloudDistance(sample_position);

             // Max SDF and Step Size
             raymarch_info.mStepSize = max(raymarch_info.mCloudDistance, adaptive_step_size);
     
             // Jitter

             if (raymarch_info.mCloudDistance < 0.0) {
		         VoxelCloudDensitySamples voxel_cloud_sample_data = GetVoxelCloudDensitySamples(raymarch_info, modeling_data, sample_position, 1.0f, true); // sample_position?
                 
                 if (voxel_cloud_sample_data.mProfile > 0.0f) {		         
                     ioPixelData.mDensity += voxel_cloud_sample_data.mFull;
                     IntegrateLightEnergy(raymarch_info, modeling_data, voxel_cloud_sample_data, 
                         sample_position, sample_coord, lightDir, cos_angle, ioPixelData);                   
		         }
             }
         }
         raymarch_info.mDistance += raymarch_info.mStepSize;

         if(raymarch_info.mDistance >= NEAR_THRESHOLD)
         {
             break;
         }
    }
}

Ray GenerateRay(vec2 uv) {
    Ray ray;

    vec3 camLook =   normalize(vec3(camera.view[0][2], camera.view[1][2], camera.view[2][2]));
    vec3 camRight =  normalize(vec3(camera.view[0][0], camera.view[1][0], camera.view[2][0]));
    vec3 camUp =     normalize(vec3(camera.view[0][1], camera.view[1][1], camera.view[2][1]));

    vec2 screenPoint = uv * 2.0 - 1.0;

    vec3 cameraPos = camera.cameraPosition.xyz;
    vec3 refPoint = cameraPos - camLook;
    vec3 p = refPoint 
             + cameraParam.aspectRatio * screenPoint.x * cameraParam.halfTanFOV * camRight 
             - screenPoint.y * cameraParam.halfTanFOV * camUp;

    ray.mOrigin = cameraPos;
    ray.mDirection = normalize(p - cameraPos);

    return ray;
}

//--------------------------------------------------------
//					        Sky
//--------------------------------------------------------

float depolarizationFactor = 0.137;
float luminance = 1.0;
float mieCoefficient = 0.0074;
float mieDirectionalG = 0.468;
vec3 mieKCoefficient = vec3(0.686, 0.678, 0.666);
float mieV = 4.007;
float mieZenithLength = 7100;
float numMolecules = 2.542e25;
vec3 primaries = vec3(6.8e-7, 5.5e-7, 4.5e-7);
float rayleigh = 5.75;
float rayleighZenithLength = 3795;
float refractiveIndex = 1.000128;
float sunAngularDiameterDegrees = 0.032;
float sunIntensityFactor = 1024;
float sunIntensityFalloffSteepness = 6.4;
float tonemapWeighting = 19.50;
float turbidity = uiParam.sky_turbidity;
vec3 UP = vec3(0.0, 0.0, -1.0);

float noise(vec3 coord)
{
    float starThreshold = 0.97;
    float n = fract(415.92653 * (0.7 * cos(37.3 * coord.x) + 1.2 * cos(56.1 * coord.y) + 0.2 * cos(45.8 * coord.z)));
    if (n >= starThreshold)
    {
        n = pow((n - starThreshold) / (1.0 - starThreshold), 10.0);
    }
    else n = 0.0;
    return n;
}

vec3 totalRayleigh(vec3 lambda)
{
	return (8.0 * pow(PI, 3.0) * pow(pow(refractiveIndex, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * depolarizationFactor)) / (3.0 * numMolecules * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * depolarizationFactor));
}

vec3 totalMie(vec3 lambda, vec3 K, float T)
{
	float c = 0.2 * T * 10e-18;
	return 0.434 * c * PI * pow((2.0 * PI) / lambda, vec3(mieV - 2.0)) * K;
}

float rayleighPhase(float cosTheta)
{
	return (3.0 / (16.0 * PI)) * (1.0 + pow(cosTheta, 2.0));
}

float henyeyGreensteinPhase(float cosTheta, float g)
{
	return (1.0 / (4.0 * PI)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0 * g * cosTheta + pow(g, 2.0), 1.5));
}

float sunIntensity(float zenithAngleCos)
{
	float cutoffAngle = PI / 1.95; // Earth shadow hack
	return sunIntensityFactor * max(0.0, 1.0 - exp(-((cutoffAngle - acos(zenithAngleCos)) / sunIntensityFalloffSteepness)));
}

vec3 Uncharted2Tonemap(vec3 W)
{
    float A = 0.15; 
    float B = 0.50; 
    float C = 0.10; 
    float D = 0.20; 
    float EE = 0.02; 
    float F = 0.30; 
	return ((W * (A * W + C * B) + D * EE) / (W * (A * W + B) + D * F)) - EE / F;
}

vec3 GetStarColor(vec3 rayDir, vec3 sunDir)
{ 
    //star
    float intensity = 0.0;
    if (sunDir.z > 0.0)
    {
        intensity = 1.0;
        if (sunDir.z < 0.75)
        {
            intensity = mix(0.0, 1.0, sunDir.z);
        }
        vec3 coordFloor = floor(rayDir * 700 + time.totalTime * 0.1);
        float starVal = noise(coordFloor) * intensity * 0.8;
        return vec3(starVal);
    }
    return vec3(0);
}

void GetSkyColor(vec3 rayDir, vec3 sunPosition, inout CloudRenderingPixelData ioPixelData)
{
    // Rayleigh coefficient
	float sunfade = 1.0 - clamp(1.0 - exp((sunPosition.y / 450000.0)), 0.0, 1.0);
	float rayleighCoefficient = rayleigh - (1.0 * (1.0 - sunfade));
	vec3 betaR = totalRayleigh(primaries) * rayleighCoefficient;
	
	// Mie coefficient
	vec3 betaM = totalMie(primaries, mieKCoefficient, turbidity) * mieCoefficient;
	
	// Optical length, cutoff angle at 90 to avoid singularity
	float zenithAngle = acos(max(0.0, dot(UP, rayDir)));
	float denom = cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / PI), -1.253);
	float sR = rayleighZenithLength / denom;
	float sM = mieZenithLength / denom;
	
	// Combined extinction factor
	vec3 Fex = exp(-(betaR * sR + betaM * sM));
	
	// In-scattering
	vec3 sunDirection = normalize(sunPosition);
	float cosTheta = dot(rayDir, sunDirection);
	vec3 betaRTheta = betaR * rayleighPhase(cosTheta * 0.5 + 0.5);
	vec3 betaMTheta = betaM * henyeyGreensteinPhase(cosTheta, mieDirectionalG);
	float sunE = sunIntensity(dot(sunDirection, UP));
	vec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex), vec3(1.5));
	Lin *= mix(vec3(1.0), pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex, vec3(0.5)), clamp(pow(1.0 - dot(UP, sunDirection), 5.0), 0.0, 1.0));

    // Store sky color without sun
    vec3 texColor = Lin;
	texColor *= 0.04;
	texColor += vec3(0.0, 0.001, 0.0025) * 0.3;
    vec3 whiteScale = 1.0 / Uncharted2Tonemap(vec3(tonemapWeighting));
	vec3 curr = Uncharted2Tonemap((log2(2.0 / pow(luminance, 4.0))) * texColor);
    vec3 color = curr * whiteScale;
	ioPixelData.mSkyColorNoSun = pow(color, vec3(1.0 / (1.2 + (1.2 * sunfade))));
	
	// Composition + solar disc
	float sunAngularDiameterCos = cos(sunAngularDiameterDegrees);
	float sundisk = smoothstep(sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta);
    ioPixelData.mSunDisk = sundisk;
	vec3 L0 = vec3(0.1) * Fex;
    float sunHDR = 1900.0;
	L0 += sunE * sunHDR * Fex * sundisk;

    // Store sky color with sun
	texColor = Lin + L0;
	texColor *= 0.04;
	texColor += vec3(0.0, 0.001, 0.0025) * 0.3;
	whiteScale = 1.0 / Uncharted2Tonemap(vec3(tonemapWeighting));
	curr = Uncharted2Tonemap((log2(2.0 / pow(luminance, 4.0))) * texColor);
    color = curr * whiteScale;
	ioPixelData.mSkyColor = pow(color, vec3(1.0 / (1.2 + (1.2 * sunfade))));

    ioPixelData.mNight = mix(0.06, 1, clamp(-sunDirection.z, 0, 1));
}

//--------------------------------------------------------
//					Main Functions
//--------------------------------------------------------

void main() {
    // Get UV
    ivec2 dim = imageSize(targetImageColor);

    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = vec2(pixel) / dim; 

    // Update Sun
    vec3 sunPos = vec3(time.sunPositionX, time.sunPositionY, time.sunPositionZ);
    vec3 sunDir = normalize(sunPos);

    // Get Camera Ray
    Ray ray = GenerateRay(uv);

    CloudRenderingPixelData ioPixelData;
    ioPixelData.mDensity = 0.0f;
    ioPixelData.mTransmittance = 1.0;
    ioPixelData.mAlpha = 1.0;
    ioPixelData.mCloudColor = vec3(0);
    ioPixelData.mSunDisk = 0.0f;
    ioPixelData.mSkyColor = vec3(0);

    GetSkyColor(ray.mDirection, sunPos, ioPixelData);

	// Raymarch
    RaymarchVoxelClouds(ray, sunDir, ioPixelData);    
      
    vec4 colorStorage = vec4(ioPixelData.mCloudColor, 1);
    vec4 densityStorage = vec4(ioPixelData.mDensity, ioPixelData.mTransmittance, ioPixelData.mAlpha, 0);

    imageStore(targetImageColor, pixel, colorStorage);
    imageStore(targetImageDensity, pixel, densityStorage);
}
